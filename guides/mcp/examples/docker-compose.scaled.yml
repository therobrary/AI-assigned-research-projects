version: '3.8'

services:
  # MCP Gateway - Main entry point and load balancer
  mcp-gateway:
    image: docker/mcp-gateway:latest
    container_name: mcp-gateway
    ports:
      - "${MCP_GATEWAY_PORT:-8080}:8080"
      - "${MCP_GATEWAY_SSL_PORT:-8443}:8443"
    environment:
      - MCP_API_KEY=${MCP_API_KEY}
      - MCP_JWT_SECRET=${MCP_JWT_SECRET}
      - MCP_DOMAIN=${MCP_DOMAIN:-localhost}
      - STOUT_SERVER_URL=http://stout-server:8081
      - SSE_SERVER_URL=http://sse-server:8082
      - STREAMABLE_SERVER_URL=http://streamable-server:8083
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://mcp_user:${POSTGRES_PASSWORD}@postgres:5432/mcp_db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=true
      - PROMETHEUS_PORT=9091
    volumes:
      - ./config:/app/config:ro
      - ./ssl:/app/ssl:ro
      - ./logs:/app/logs
    depends_on:
      - stout-server
      - sse-server
      - streamable-server
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - mcp-network

  # Stout Servers - High-throughput request/response processing
  stout-server:
    image: docker/mcp-stout-server:latest
    ports:
      - "8081"
    environment:
      - MCP_API_KEY=${MCP_API_KEY}
      - SERVER_PORT=8081
      - MAX_WORKERS=8
      - REQUEST_TIMEOUT=30
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=true
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - mcp-network

  # SSE Servers - Server-Sent Events for real-time streaming
  sse-server:
    image: docker/mcp-sse-server:latest
    ports:
      - "8082"
    environment:
      - MCP_API_KEY=${MCP_API_KEY}
      - SERVER_PORT=8082
      - MAX_CONNECTIONS=100
      - STREAM_TIMEOUT=300
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=true
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - mcp-network

  # Streamable HTTP Servers - HTTP-based streaming for large data transfers
  streamable-server:
    image: docker/mcp-streamable-server:latest
    ports:
      - "8083"
    environment:
      - MCP_API_KEY=${MCP_API_KEY}
      - SERVER_PORT=8083
      - MAX_CHUNK_SIZE=1048576  # 1MB chunks
      - STREAM_TIMEOUT=600
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=true
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - mcp-network

  # Redis - Caching and session storage
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - mcp-network

  # PostgreSQL - Persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    ports:
      - "5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mcp_db}
      - POSTGRES_USER=${POSTGRES_USER:-mcp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp_user} -d ${POSTGRES_DB:-mcp_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - mcp-network

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - mcp-network

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  mcp-logs:
    driver: local
  mcp-data:
    driver: local